name: Deploy to GitHub Pages

on:
  push:
    branches:
      - master
    tags:
      - 'Release-*'

permissions:
  contents: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: master  # Explicitly check out the master branch
          fetch-depth: 0  # Fetch all history and tags

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Get version from Git tags
        id: get_version
        run: |
          # Get the latest Release tag
          LATEST_TAG=$(git describe --tags --match "Release-*" --abbrev=0)
          if [ -z "$LATEST_TAG" ]; then
          echo "No Release tag found. Using default version."
          echo "VERSION=1.0.0" >> $GITHUB_OUTPUT
          exit 0
          fi
          echo "LATEST_TAG: $LATEST_TAG"
          # Extract version number from the tag (e.g., Release-1.0.1 -> 1.0.1)
          VERSION_NUMBER=$(echo "$LATEST_TAG" | sed 's/^Release-//')
          echo "VERSION_NUMBER: $VERSION_NUMBER"
          # Get the distance since the latest tag
          DISTANCE=$(git rev-list --count "$LATEST_TAG"..HEAD)
          echo "DISTANCE: $DISTANCE"
          # Append -SP<distance> if distance is greater than 0
          if [ "$DISTANCE" -gt 0 ]; then
            # Increment the third number
            VERSION_NUMBER=$(echo "$VERSION_NUMBER" | awk -F. -v OFS=. '{$3++; print}')
            # Add SP info
            DISTANCE=$(printf "%03d" "$DISTANCE")
            VERSION="$VERSION_NUMBER-SP$DISTANCE"
          else
            VERSION="$VERSION_NUMBER"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Using version: $VERSION"

      - name: Build project
        run: npm run build
        env:
          VERSION: ${{ steps.get_version.outputs.VERSION }}

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist

      - name: Create Release
        run: |
          VERS=${{ steps.get_version.outputs.VERSION }}
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
          gh release create "$VERS" --title "Audio Device Manager $VERS" --notes "Release of Audio Device Manager $VERS"