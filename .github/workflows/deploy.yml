name: Deploy to GitHub Pages

on:
  push:
    branches:
      - main
    tags:
      - 'Release-*'

  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history and tags

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 'node'

      - name: Install dependencies
        run: npm install

      - name: Get version from Git tags
        id: get_version
        run: |
          # Get the latest Release tag
          LATEST_TAG=$(git describe --tags --match "Release-*" --abbrev=0)
          if [ -z "$LATEST_TAG" ]; then
            echo "No Release tag found. Using default version."
            echo "VERSION=1.0.0" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "LATEST_TAG: $LATEST_TAG"
          # Extract version number from the tag (e.g., Release-1.0.1 -> 1.0.1)
          VERSION_NUMBER=$(echo "$LATEST_TAG" | sed 's/^Release-//')
          echo "VERSION_NUMBER: $VERSION_NUMBER"
          # Get the distance since the latest tag
          DISTANCE=$(git rev-list --count "$LATEST_TAG"..HEAD)
          echo "DISTANCE: $DISTANCE"
          # Append -RC<distance> if distance is greater than 0
          if [ "$DISTANCE" -gt 0 ]; then
            # Increment the third number
            VERSION_NUMBER=$(echo "$VERSION_NUMBER" | awk -F. -v OFS=. '{$3++; print}')
            # Add RC info
            DISTANCE=$(printf "%03d" "$DISTANCE")
            VERSION="$VERSION_NUMBER-RC$DISTANCE"
          else
            VERSION="$VERSION_NUMBER"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Using version: $VERSION"

      - name: Get latest check-in time from Git
        id: get_latest_commit_date
        run: |
          # Get the latest commit date in ISO 8601 format
          LATEST_COMMIT_DATE=$(git log -1 --format=%cd --date=format:'%Y-%m-%dT%H:%M:%S%z')
          echo "LATEST_COMMIT_DATE=$LATEST_COMMIT_DATE" >> $GITHUB_OUTPUT
          echo "Latest commit date: $LATEST_COMMIT_DATE"    

      - name: Generate .env.production file
        run: |
          node -e "
            const CryptoJS = require('crypto-js');
            const encryptionKey = '32-characters-long-secure-key-12';
            //
            // read and encrypt secrets:
            const tokenSecret = '${{ secrets.UNIVERSAL_PAT }}';
            if (!tokenSecret) {
               throw new Error('UNIVERSAL_PAT secret is empty or undefined');
            }
            const encryptedTokenSecret = CryptoJS.AES.encrypt(tokenSecret, encryptionKey).toString();
            const githubUrlSecret = '${{ secrets.AUDIO_API_GITHUB_URL }}';
            if (!githubUrlSecret) {
               throw new Error('AUDIO_API_GITHUB_URL secret is empty or undefined');
            }
            const encryptedGithubUrlSecret = CryptoJS.AES.encrypt(githubUrlSecret, encryptionKey).toString();
            const azureUrlSecret = '${{ secrets.AUDIO_API_AZURE_URL }}';
            if (!azureUrlSecret) {
               throw new Error('AUDIO_API_AZURE_URL secret is empty or undefined');
            }
            const encryptedAzureUrlSecret = CryptoJS.AES.encrypt(azureUrlSecret, encryptionKey).toString();
            // read version and latest commit date:
            const clientVersion = '${{ steps.get_version.outputs.VERSION }}';
            const latestCommitDate = '${{ steps.get_latest_commit_date.outputs.LATEST_COMMIT_DATE }}';
            // Write to .env.production file:
            const fs = require('fs');
            fs.writeFileSync('./.env.production', 'VITE_UNIVERSAL_PAT=' + encryptedTokenSecret + '\n');
            fs.appendFileSync('./.env.production', 'VITE_API_GITHUB_URL=' + encryptedGithubUrlSecret + '\n');
            fs.appendFileSync('./.env.production', 'VITE_API_AZURE_URL=' + encryptedAzureUrlSecret + '\n');
            // fs.appendFileSync('./.env.production', 'VITE_API_HOSTED_ON=AZURE\n'); // can be GITHUB or AZURE
            fs.appendFileSync('./.env.production', 'VITE_API_HOSTED_ON=GITHUB\n'); // can be GITHUB or AZURE
            fs.appendFileSync('./.env.production', 'VITE_CLIENT_VERSION=' + clientVersion + '\n');
            fs.appendFileSync('./.env.production', 'VITE_CLIENT_LATEST_COMMIT_DATE=' + latestCommitDate + '\n');
            console.log('.env.production file created successfully');
          "

      - name: Build project
        run: npm run build
        env:
          VERSION: ${{ steps.get_version.outputs.VERSION }}

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist

      - name: Create Release
        run: |
          VERS=${{ steps.get_version.outputs.VERSION }}
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
          gh release create "$VERS" --title "AudioDeviceRepoClient $VERS" --notes "Release of Audio Device Repository Client $VERS"
