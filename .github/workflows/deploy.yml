name: Deploy to GitHub Pages

on:
  push:
    branches:
      - main
    tags:
      - 'Release-*'

permissions:
  contents: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history and tags

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 'node'

      - name: Install dependencies
        run: npm install

      - name: Get version from Git tags
        id: get_version
        run: |
          # Get the latest Release tag
          LATEST_TAG=$(git describe --tags --match "Release-*" --abbrev=0)
          if [ -z "$LATEST_TAG" ]; then
            echo "No Release tag found. Using default version."
            echo "VERSION=1.0.0" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "LATEST_TAG: $LATEST_TAG"
          # Extract version number from the tag (e.g., Release-1.0.1 -> 1.0.1)
          VERSION_NUMBER=$(echo "$LATEST_TAG" | sed 's/^Release-//')
          echo "VERSION_NUMBER: $VERSION_NUMBER"
          # Get the distance since the latest tag
          DISTANCE=$(git rev-list --count "$LATEST_TAG"..HEAD)
          echo "DISTANCE: $DISTANCE"
          # Append -RC<distance> if distance is greater than 0
          if [ "$DISTANCE" -gt 0 ]; then
            # Increment the third number
            VERSION_NUMBER=$(echo "$VERSION_NUMBER" | awk -F. -v OFS=. '{$3++; print}')
            # Add RC info
            DISTANCE=$(printf "%03d" "$DISTANCE")
            VERSION="$VERSION_NUMBER-RC$DISTANCE"
          else
            VERSION="$VERSION_NUMBER"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Using version: $VERSION"

      - name: Generate .env.production file
        run: |
          npm install --no-save @stablelib/xchacha20poly1305 @stablelib/random @stablelib/base64
          node -e "
            const { XChaCha20Poly1305 } = require('@stablelib/xchacha20poly1305');
            const { randomBytes } = require('@stablelib/random');
            const { encode: base64Encode } = require('@stablelib/base64');
            const crypto = require('crypto');
          
            // Convert string to key using SHA-256 (ensures correct key length)
            function stringToKey(str) {
              return crypto.createHash('sha256').update(str).digest();
            }
          
            // Encrypt function using XChaCha20-Poly1305
            function encrypt(text, password) {
              const key = stringToKey(password);
              const nonce = randomBytes(24); // XChaCha20 uses 24-byte nonces
          
              const cipher = new XChaCha20Poly1305(key);
              const messageBytes = Buffer.from(text, 'utf8');
              const ciphertext = cipher.seal(nonce, messageBytes);
          
              // Combine nonce and ciphertext and encode as base64
              const combined = new Uint8Array(nonce.length + ciphertext.length);
              combined.set(nonce);
              combined.set(ciphertext, nonce.length);
          
              return base64Encode(combined);
            }
          
            const encryptionKey = '32-characters-long-secure-key-12';
            const tokenSecret = '${{ secrets.UNIVERSAL_PAT }}';
            if (!tokenSecret) {
               throw new Error('UNIVERSAL_PAT secret is empty or undefined');
            }
            const encryptedTokenSecret = encrypt(tokenSecret, encryptionKey);
          
            const urlSecret = '${{ secrets.AUDIO_API_URL }}';
            if (!urlSecret) {
               throw new Error('AUDIO_API_URL secret is empty or undefined');
            }
            const encryptedUrlSecret = encrypt(urlSecret, encryptionKey);
          
            const fs = require('fs');
            fs.writeFileSync('./dist/.env.production', 'VITE_UNIVERSAL_PAT=' + encryptedTokenSecret + '\n');
            fs.appendFileSync('./dist/.env.production', 'VITE_API_URL_DEV_MODE=' + encryptedUrlSecret + '\n');
            console.log('.env.production file created successfully');
          "
#         echo ".env.production generation is commented out..."

      - name: Build project
        run: npm run build
        env:
          VERSION: ${{ steps.get_version.outputs.VERSION }}

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist

      - name: Start Codespace
        run: |
          PAT=${{ secrets.UNIVERSAL_PAT }}
          CS_DISPLAY_NAME="CodeSpaceMain"
          OWNER="eduarddanziger"          # Replace with your GitHub username or organization name
          REPO="list-audio-react-app"     # Replace with your repository name (if applicable)
          GITHUB_API_URL="https://api.github.com"
          # Headers for API requests
          HEADERS=(
              "-H" "Authorization: token $PAT"
              "-H" "Accept: application/vnd.github+json"
          )
          echo "Try getting codespaces..."
          INFO_URL="$GITHUB_API_URL/user/codespaces"
          RESPONSE=$(curl -s "${HEADERS[@]}" "$INFO_URL")
          # Check if the response contains Codespaces
          if echo "$RESPONSE" | jq -e '.codespaces == null or .codespaces == []' > /dev/null; then
              echo "No codespaces found."
              exit 1
          fi
          echo "...Got codespaces. Try getting codespace name on display name..."
          CS_NAME=$(echo "$RESPONSE" | jq -r --arg NAME "$CS_DISPLAY_NAME" '.codespaces[] | select(.display_name == $NAME) | .name')
          echo "...Got codespaces name: $CS_NAME. Try starting codespace..."
          CS_URL="$GITHUB_API_URL/user/codespaces/$CS_NAME/start"
          curl -X POST "${HEADERS[@]}" "$CS_URL"
          echo "...Codespaces started: $CS_NAME."

      - name: Create Release
        run: |
          VERS=${{ steps.get_version.outputs.VERSION }}
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
          gh release create "$VERS" --title "Audio Device Manager $VERS" --notes "Release of Audio Device Manager $VERS"
